
# Project Progress Documentation:

Project Overview:
    - MyBudgetV2 is a website created to help users keep track of their daily expenses
    - It allows them to view their expenses in different categories, based on price/date/type of expense
    - They can also view a graph that allows the user to visually see what categories they spend it on most

Project Idea:
    - I needed to recreate the application because I wanted to host the website. I noticed that 
      PHP is sort of outdated and it would be difficult to host the website with that language.
      I wanted to use something more common today, so I decided to use Flask with PHP.
    - I didn't know how to use Flask so I researched how to make a basic website with it and it 
      and I learned how to use it. I ended up recreating the MyBudget project using python and Flask.

Tech Used:
    Python:
        - main language used with all frameworks
    Flask and extensions (framework):
        - website framework for python
        - flask_login (extension)
    Jinja (framework):
        - a separate templating framework usually used with Flask
        - renders templates and its content with "{% block content %} ... {% endblock %}"
        - can pass variables with "{{ data_used }}"
    Bootstrap (framework):
        - website framework for CSS
    workzeug.security (framework):
        - extension that helps use with authenticating users

Problems and Solutions:
    - ** talk about how when adding functionalities and encountering problems, what did I do to solve them
    - Flask in general wasn't that difficult to learn. This was my first time using frameworks with web dev, 
      but I was familiar with the underlying concepts (server/client sides, connecting to databases, querying
      Databases). What I wasn't familiar with was how Flask organized they're applications in specific
      Directories, how they used routes to view webpages, and how they implemented python into a web dev
      environment. It was difficult at first, but I got the hang of it and I can see myself using it more than PHP
    - Flask wasn't using the "view@route("/home")" route correctly. It was supposed to redirect the user to the 
      home page. After doing some research, I was able to fix this by removing the "home" from the argument, which
      allowed me to redirect the user to the home page correctly.
    - I wanted to add the functionality of displaying user data from the database. I accomplished this by learning
      how to use SQLAlchemy (the sql methodology of Flask), resulting in allowing me to display the data. It was
      important because it is how the use is able to see the data.









# -------------------------------------------------------
# -------------------------------------------------------
# My Personal Notes:

# Setting up the directories:
1. create the ~/website folder
2. create the ~/website/static and ~/website/templates folders
3. create the __init__.py, auth.py, models.py, and views.py folder in ~/MyBudgetV2/website
4. create the main.py outside ~/MyBudgetV2

# Directories and files explanations:
    ~/static:
        holds all javascript code, images, or css files. all files that do not change

    ~/tempates:
        holds all html code

    __init__.py:
        this file is the first thing that runs when you launch the application

    auth.py:
        contains code that routes all the files regarding user authorization

    models.py:
        used to create our database models

    views.py:
        used to render template files so they are actual webpages

    main.py:
        uses a function to create the application


# -------------------------------------------------------
# Things to know with Python and Flask:
- use the {{}} and write python code in between the brackets
- querying the flask database in python:
    - go to the directory of the project
    - input: export FLASK_APP=main.py
    - input: flask shell
    - now you can query the database you've created



# -------------------------------------------------------
# Setting up flask:
1. install flask:
    pip install flask
2. install flask login:
    pip install flask-login
3. install flask to use with databases:
    pip install flask-sqlalchemy

# Setting up the app:
1. in "__init__.py", import flask:
    from flask import Flask
2. make the method to create an app object:
    def create_app():
        app = Flask("__name__");
        app.config["SECRET_KEY"] = "123456";
        return app;

# Create website routes:
1. in "views.py", create the blueprint:
    from flask import Blueprint
    views = Blueprint("views", __name__);
2. in "auth.py", create the blueprint:
    from flask import Blueprint
    auth = Blueprint("auth", __name__);








